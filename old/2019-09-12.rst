----

C++20 Concepts Are Here in Visual Studio 2019 version 16.3
==========================================================

https://devblogs.microsoft.com/cppblog/c20-concepts-are-here-in-visual-studio-2019-version-16-3/

https://www.reddit.com/r/cpp/comments/d2alin/c20_concepts_in_visual_studio_2019_version_163/

Dropbox abandons C++, uses Swift, Kotlin, JavaScript and Electron instead
=========================================================================

* `Eyal Guthmann (Dropbox): The (not so) hidden cost of sharing code between iOS and Android
  <https://blogs.dropbox.com/tech/2019/08/the-not-so-hidden-cost-of-sharing-code-between-ios-and-android/>`_
  * `Reddit <https://www.reddit.com/r/cpp/comments/cqft4t/dropbox_replaces_c_with_platformspecific_languages/>`_
  * `HackerNews <https://news.ycombinator.com/item?id=20695806>`_

|

  It’s possible we could have done a better job at leveraging open source C++ libraries, but the
  open source culture in the C++ development community was (is still?) not as strong as it is in
  the mobile development community <...>

  It seems like the real issue was that Dropbox lost all of their senior C++ engineers.

* `The Register: Dropbox would rather write code twice than try to make C++ work on both iOS and
  Android <https://www.theregister.co.uk/2019/08/16/dropbox_gives_up_on_sharing_c_code_between_ios_and_android/>`_
  * `Reddit <https://www.reddit.com/r/programming/comments/crunfh/dropbox_would_rather_write_code_twice_than_try_to/>`_

Dropbox abandons C++, uses Swift, Kotlin, JavaScript and Electron instead
=========================================================================

Previously
----------

* `Djinni <https://github.com/dropbox/djinni>`_
* `CppCon 2014: Alex Allain & Andrew Twyman "Practical Cross-Platform Mobile C++ Development
  <https://www.youtube.com/watch?v=ZcBtF-JWJhM>`_
* `CppCon 2017: Stephen Spann “Cross-Platform Apps with Dropbox’s Djinni...”
  <https://www.youtube.com/watch?v=ssqhz_1pPI4>`_

Unified function call
=====================

Barry Revzin
------------

* `What is unified function call syntax anyway? <https://brevzin.github.io/c++/2019/04/13/ufcs-history/>`_
  * `Reddit <https://www.reddit.com/r/cpp/comments/bdflpx/what_is_unified_function_call_syntax_anyway/>`_
* `UFCS Customization and Extension <https://brevzin.github.io/c++/2019/08/22/ufcs-custom-extension/>`_
  * `Reddit <https://www.reddit.com/r/cpp/comments/ctykwd/ufcs_customization_and_extension/>`_
  * `P1282R0 Ceci N’est Pas Une Pipe: Adding a workflow operator to C++ <http://wg21.link/p1282>`_

Unified function call
=====================

* Bjarne Stroustrup. `A bit of background for the unified call proposal
<https://isocpp.org/blog/2016/02/a-bit-of-background-for-the-unified-call-proposal>`_

  Based on real input from code and users, I reluctantly agreed that for compatibility reasons,
  x.f(y) and f(x,y) could not mean exactly the same. The only feasible way forward was to do a
  traditional lookup based on the syntax used, and then try the other syntax if the first one
  failed. Stability – backwards compatibility – is an important feature, overruling my desire for
  perfection.

* `P0131 Unified call syntax concerns
<http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0131r0.pdf>`_

Approval tests (1/2)
====================

Also known as **Golden Master Tests** or **Snapshot Testing** (locking down current behaviour)

* CppOnSea 2019 - Clare Macrae - Quickly testing legacy code https://youtu.be/dtm8V3TIB6k
  * Slides https://slideshare.net/ClareMacrae
  * CppCast with Clare Macrae https://cppcast.com/clare-macrae/
    * r/cpp https://www.reddit.com/r/cpp/comments/ckzc11/cppcast_approval_tests_with_clare_macrae/
* Code https://github.com/approvals/ApprovalTests.cpp (Apache 2.0)
* Approval Tests Library - Capturing Human Intelligence [available for Java, C#, VB.Net, PHP, Ruby, Node.JS and Python]
  https://approvaltests.com/ by Llevelyn Falco
  * Supports Catch, Catch 2, Google Test, `Okra <https://github.com/JayBazuzi/Okra>`_
* Mutation tests: sabotage the code
  * Mutate++ https://github.com/nlohmann/mutate_cpp

Approval tests (2/2)
====================

Books
-----

* Modern C++ Programming with Test-Driven Development, by Jeff Langr
  [`Safari Books Online <https://learning.oreilly.com/library/view/modern-c-programming/9781941222423/>`_]
* Your Code as a Crime Scene, by Adam Tornhill
  [`Safari Books Online <https://learning.oreilly.com/library/view/your-code-as/9781680500813/>`_]
* Software Design X-Rays, by Adam Tornhill
  [`Safari Books Online <https://learning.oreilly.com/library/view/software-design-x-rays/9781680505795/>`_]

Tools
-----

* OpenCoverage https://github.com/OpenCppCoverage
* BullseyeCoverage https://www.bullseye.com

Crash course in Qt for C++ developers
=====================================

https://www.cleanqt.io/blog/crash-course-in-qt-for-c%2B%2B-developers,-part-1

Modern Qt Development: The Top 10 Tools You Should Be Using
===========================================================

https://blog.qt.io/blog/2018/10/12/modern-qt-development-top-10-tools-using/

https://www.reddit.com/r/cpp/comments/9njw5n/is_there_an_easytouse_gui_library/

CMake it modern using C++ and Qt
================================

https://www.cleanqt.io/blog/cmake-it-modern-using-c%2B%2B-and-qt,-part-1

A new SQLite C++ wrapper
========================

https://blog.trailofbits.com/2019/08/26/wrappers-delight/

https://www.reddit.com/r/cpp/comments/cxxk4b/a_new_c_sqlite_wrapper/

The Reddit thread also includes a heated discussion on how to handle errors and if exceptions are a
good thing (eyeroll).

**strong_typedef** - Create distinct types for distinct purposes
================================================================

Article by Anthony Williams

https://www.justsoftwaresolutions.co.uk/cplusplus/strong_typedef.html

https://github.com/anthonywilliams/strong_typedef

.. code:: c++

  using transaction_id =
    jss::strong_typedef<struct transaction_tag, std::string>;

  bool is_a_foo(transaction_id id)
  {
    auto &s = id.underlying_value();
    return s.find("foo") != s.end();
  }

Twitter: CppCon Bingo
=====================

.. image:: img/cppcon-bingo.png
   :width: 70%
