----

Proper way to iterate backwards in C++
--------------------------------------

https://www.reddit.com/r/cpp/comments/947a1z/proper_way_to_do_backward_iteration_in_c/

.. code:: c++

    for (size_t i = data.size() - 1; i >= 0; --i) { ... } // Nope
    for (size_t i = data.size(); i--;) { ... } // The C way

    // C++17
    std::vector<int> vec;
    for (auto [value, idx] : reverse_index_adapter(vec)) {
        // idx = n-1, n-2, ... 0
    }

    std::for_each(vec.rbegin(), vec.rend(), []() { ... }); // No index

    for (auto it = data.rbegin(); it != data.rend(); ++it) {
        auto i = std::distance(it, data.rend()) - 1;
    }

Move smart pointers in and out functions in modern C++
------------------------------------------------------

* `Move smart pointers in and out functions in modern C++`_
  * Reddit: https://www.reddit.com/r/cpp/comments/aaux96/move_smart_pointers_in_and_out_functions_in/

.. _`Move smart pointers in and out functions in modern C++`: https://www.internalpointers.com/post/move-smart-pointers-and-out-functions-modern-c

CppCon 2018 - Andreas Weis - Fixing Two-Phase Initialisation
------------------------------------------------------------

https://youtu.be/S7I66lZX_zM

Inverse two-phase initialisation

.. code:: c++

    class Foo
    {
        static expected<construction_token>
        preconstruct(Arg n_arg) noexcept
        {
            construction_token t;
            t.state = make_unique_nothrow(n_arg);
            if (!t.state) return unexpected(my_errc::error);
            return t;
        }

        Foo(construction_token&& t) noexcept
        : m_state(std::move(t.state)) {}
    };

CppCon 2018 - Andreas Weis - Fixing Two-Phase Initialisation
------------------------------------------------------------

https://youtu.be/S7I66lZX_zM

Inverse two-phase initialisation: usage

.. code:: c++

    // 1
    expected<Foo::construction_token> t1 = Foo::preconstruct(args);
    if (!t1.has_value()) { /* get out */ }
    Foo obj(std::move(*t1));

    // 2
    auto t2 = Foo::preconstruct(args);
    auto obj_ptr = std::make_shared<Foo>(std::move(*t2));

    // 3
    auto t3 = Foo::preconstruct(args);
    std::vector<Foo> objects;
    objects.emplace_back(std::move(*t3));

Twitter
-------

.. image:: img/js-increment.png
