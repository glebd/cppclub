---
title:    Meeting 10 January 2019
author:   Gleb Dolgich
date:     2019-01-10
tags:
  - WG21
  - Trip report
  - JeanHeyd Meneide
  - Ranges
  - Initialization
  - Enums
  - Legacy code
  - Jan Wilmans
  - SIMD
  - Gamedev
  - Boost
  - Iterators
---

Meeting 10 January 2019
=======================

Post-San Diego
--------------

* mailing2018-11_
* Aftermath_ by JeanHeyd Meneide

.. _mailing2018-11: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/#mailing2018-11
.. _Aftermath: https://thephd.github.io/san-diego-2018-c++-committee-trip-report

A Perspective on C++ Standardization in 2018
--------------------------------------------

`A Perspective on C++ Standardization in 2018`_     by JeanHeyd Meneide

    You can roll your fantastic thing in your engine / application / middleware / scientific package? Awesome!
    Now write a specification for it.

* The Rigor of Standardization
* Surviving the Process (burnout)
* The Composition of the C++ Standardization Committee

.. _`A Perspective on C++ Standardization in 2018`: https://thephd.github.io/perspective-standardization-in-2018

Articles on Ranges
------------------

* `Ranges, Code Quality, and the Future of C++`_ by Jason Meisel
* Reddit: https://www.reddit.com/r/cpp/comments/a9qb54/ranges_code_quality_and_the_future_of_c/
    * C++2a is going to be the best version of C++ yet, and a big reason for that is Ericâ€™s Ranges library.
    * A range allows you to return the algorithm itself, rather than the data the algorithm generates. This way, you can combine it with other algorithms without modifying it directly.
    * Ranges are for utilizing algorithms and coroutines are for implementing algorithms.
* `Ranges TS and signed sizes?`_
* `A Prime Opportunity for Ranges`_ by Christopher Di Bella

.. _`Ranges, Code Quality, and the Future of C++`: https://medium.com/@jasonmeisel/ranges-code-quality-and-the-future-of-c-99adc6199608
.. _`Ranges TS and signed sizes?`: https://www.reddit.com/r/cpp/comments/a3gcdi/range_ts_and_signed_sizes/
.. _`A Prime Opportunity for Ranges`: https://www.cjdb.com.au/a-prime-opportunity-for-ranges

How to Initialize a String Member
---------------------------------

`How to Initialize a String Member`_ by B. Filipek

.. _`How to Initialize a String Member`: https://www.bfilipek.com/2018/08/init-string-member.html

LazyCode
--------

Making C++ cool again, bringing in those expressions from other languages that you wish you had; list comprehension
style maps, filters, ranges, etc.

* Code: https://github.com/SaadAttieh/lazyCode

.. code:: c++

    int total = lz::read<int>(ifstream("test.txt")) | lz::limit(10) |
                lz::filter([](int i) { return i % 2 == 0; }) |
                lz::map([](int i) { return i * i; }) | lz::sum();

Better Enums
------------

* Docs: https://aantron.github.io/better-enums/index.html
* Code: https://github.com/aantron/better-enums

.. code:: c++

    #include <iostream>
    #include "enum.h"

    BETTER_ENUM(Word, int, Hello, World)

    int main()
    {
        std::cout << (+Word::Hello)._to_string() << ", "
                  << (+Word::World)._to_string() << "!"
                  << std::endl;

        return 0;
    }

How to refurbish legacy code into a maintainable state
------------------------------------------------------

`How to refurbish legacy code into a maintainable state`_ by Jan Wilmans

* Defensive programming
* Owning raw pointers
* Const correctness

  - Use **override** to detect interface changes after adding **const**

* Smart pointers and RAII

  - Use custom destructor with **std::unique_ptr**

* Tips and tricks

  - Easy logging from anywhere

.. _`How to refurbish legacy code into a maintainable state`: http://nullptr.nl/2018/08/refurbish-legacy-code/

C++, C# and Unity
-----------------

`C++, C# and Unity`_, by Lucas Meijer

.. _`C++, C# and Unity`: http://lucasmeijer.com/posts/cpp_unity/

SIMD Visualizer
---------------

* Code: https://github.com/piotte13/SIMD-Visualiser

Python-Like `enumerate()` In C++17
------------------------------------

* `Python-Like enumerate() In C++17`_ by Nathan Reed

Python:

.. code:: python

    for i, thing in enumerate(listOfThings):
        print("The %dth thing is %s" % (i, thing))

C++:

.. code:: c++

    std::vector<Thing> things;
    ...
    for (auto [i, thing] : enumerate(things))
    {
        // i gets the index and thing gets the Thing in each iteration
    }

* `Boost Counting Iterator`_

.. _`Python-Like enumerate() In C++17`: http://reedbeta.com/blog/python-like-enumerate-in-cpp17/
.. _`Boost Counting Iterator`: https://www.boost.org/doc/libs/1_69_0/libs/iterator/doc/counting_iterator.html

The Sleep Constructor
---------------------

.. image:: /img/the-sleep-ctor.png

Twitter
-------

.. image:: /img/programming-like-writing-book.png

Bjarne Meme
-----------

.. image:: /img/bjarne-didnt-plan-for-this.png
