----

Post-San Diego
--------------

* mailing2018-11_
* `Aftermath, by JeanHeyd Meneide`_

.. _mailing2018-11: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/#mailing2018-11
.. _`Aftermath, by JeanHeyd Meneide`: https://thephd.github.io/san-diego-2018-c++-committee-trip-report

Articles on Ranges
------------------

* `Ranges, Code Quality, and the Future of C++`_ by Jason Meisel
  * Reddit: https://www.reddit.com/r/cpp/comments/a9qb54/ranges_code_quality_and_the_future_of_c/
    * C++2a is going to be the best version of C++ yet, and a big reason for that is Ericâ€™s Ranges library.
    * A range allows you to return the algorithm itself, rather than the data the algorithm generates. This way, you can combine it with other algorithms without modifying it directly.
    * Ranges are for utilizing algorithms and coroutines are for implementing algorithms.
* `Ranges TS and signed sizes?`_
* `A Prime Opportunity for Ranges`_ by Christopher Di Bella

.. _`Ranges, Code Quality, and the Future of C++`: https://medium.com/@jasonmeisel/ranges-code-quality-and-the-future-of-c-99adc6199608
.. _`Ranges TS and signed sizes?`: https://www.reddit.com/r/cpp/comments/a3gcdi/range_ts_and_signed_sizes/
.. _`A Prime Opportunity for Ranges`: https://www.cjdb.com.au/a-prime-opportunity-for-ranges

How to Initialize a String Member
---------------------------------

`How to Initialize a String Member`_ by B. Filipek

.. _`How to Initialize a String Member`: https://www.bfilipek.com/2018/08/init-string-member.html

Oh DeaR
-------

* `Oh DeaR`_ by JeanHeyd Meneide
* Reddit: https://www.reddit.com/r/cpp/comments/a5rkfr/oh_dear/

.. _`Oh DeaR`: https://thephd.github.io/oh-dear-odr-trap

Intel Contributes Its Parallel STL Implementation To LLVM
---------------------------------------------------------

* `Intel Contributes Its Parallel STL Implementation To LLVM`_
* Announcement: https://lists.llvm.org/pipermail/cfe-dev/2018-December/060606.html
* Code: https://github.com/llvm-mirror/pstl/commits/master
* Reddit: https://www.reddit.com/r/cpp/comments/a9n0gk/intel_contributes_its_parallel_stl_implementation/

.. _`Intel Contributes Its Parallel STL Implementation To LLVM`: https://www.phoronix.com/scan.php?page=news_item&px=Intel-Parallel-STL-Commit

Rant alert: C++ error handling
------------------------------

Reddit: https://www.reddit.com/r/cpp/comments/ae60nb/decades_have_passed_standard_c_has_no_agreed_and/

    I think the problem really stems from the places where exceptions don't work well. Otherwise I'd use them all the time. <...> E.g. im working on an app using actors which send messages back and forth. Throwing an exception in the message handler may mean something but it certainly isn't going to automatically make its way back to it's source. [#]_

    FYI ``Outcome`` and ``std::expected<T, E>`` have diverged by a fair bit <...>. They are now two differing interpretations of how best to implement exception-less failure handling. There is a third approach proposed for Boost as well, called LEAF_. [#]_

.. _LEAF: https://zajo.github.io/leaf/
.. [#] https://www.reddit.com/r/cpp/comments/ae60nb/decades_have_passed_standard_c_has_no_agreed_and/edmnpez/
.. [#] https://www.reddit.com/r/cpp/comments/ae60nb/decades_have_passed_standard_c_has_no_agreed_and/edmpcon/

Cpp-Taskflow
------------

* Code: https://github.com/cpp-taskflow/cpp-taskflow
* Docs: https://cpp-taskflow.github.io/cpp-taskflow-documentation.github.io/
* Reddit: https://www.reddit.com/r/cpp/comments/9b01ek/cpptaskflow_v20_a_new_taskbased_parallel/

Proper way to iterate backwards in C++
--------------------------------------

https://www.reddit.com/r/cpp/comments/947a1z/proper_way_to_do_backward_iteration_in_c/

.. code:: c++

    for (size_t i = data.size() - 1; i >= 0; --i) { ... } // Nope
    for (size_t i = data.size(); i--;) { ... } // The C way

    // C++17
    std::vector<int> vec;
    for (auto [value, idx] : reverse_index_adapter(vec)) {
        // idx = n-1, n-2, ... 0
    }

    std::for_each(vec.rbegin(), vec.rend(), []() { ... }); // No index

    for (auto it = data.rbegin(); it != data.rend(); ++it) {
        auto i = std::distance(it, data.rend()) - 1;
    }

A Perspective on C++ Standardization in 2018
--------------------------------------------

`A Perspective on C++ Standardization in 2018`_

    You can roll your fantastic thing in your engine / application / middleware / scientific package? Awesome!
    Now write a specification for it.

* The Rigor of Standardization
* Surviving the Process (burnout)
* The Composition of the C++ Standardization Committee

.. _`A Perspective on C++ Standardization in 2018`: https://thephd.github.io/perspective-standardization-in-2018

LazyCode
--------

Making C++ cool again, bringing in those expressions from other languages that you wish you had; list comprehension
style maps, filters, ranges, etc.

* Code: https://github.com/SaadAttieh/lazyCode

.. code:: c++

    int total = lz::read<int>(ifstream("test.txt")) | lz::limit(10) |
                lz::filter([](int i) { return i % 2 == 0; }) |
                lz::map([](int i) { return i * i; }) | lz::sum();

Better Enums
------------

* Docs: https://aantron.github.io/better-enums/index.html
* Code: https://github.com/aantron/better-enums

.. code:: c++

    #include <iostream>
    #include "enum.h"

    BETTER_ENUM(Word, int, Hello, World)

    int main()
    {
        std::cout << (+Word::Hello)._to_string() << ", "
                  << (+Word::World)._to_string() << "!"
                  << std::endl;

        return 0;
    }

How to refurbish legacy code into a maintainable state
------------------------------------------------------

`How to refurbish legacy code into a maintainable state`_ by Jan Wilmans

* Defensive programming
* Owning raw pointers
* Const correctness

  - Use **override** to detect interface changes after adding **const**

* Smart pointers and RAII

  - Use custom destructor with **std::unique_ptr**

* Tips and tricks

  - Easy logging from anywhere

.. _`How to refurbish legacy code into a maintainable state`: http://nullptr.nl/2018/08/refurbish-legacy-code/

Move smart pointers in and out functions in modern C++
------------------------------------------------------

* `Move smart pointers in and out functions in modern C++`_
  * Reddit: https://www.reddit.com/r/cpp/comments/aaux96/move_smart_pointers_in_and_out_functions_in/

.. _`Move smart pointers in and out functions in modern C++`: https://www.internalpointers.com/post/move-smart-pointers-and-out-functions-modern-c

C++, C# and Unity
-----------------

`C++, C# and Unity`_, by Lucas Meijer

.. _`C++, C# and Unity`: http://lucasmeijer.com/posts/cpp_unity/

SIMD Visualizer
---------------

* Code: https://github.com/piotte13/SIMD-Visualiser

Python-Like **enumerate()** In C++17
------------------------------------

* `Python-Like enumerate() In C++17`_ by Nathan Reed

Python:

.. code:: python

    for i, thing in enumerate(listOfThings):
        print("The %dth thing is %s" % (i, thing))

C++:

.. code:: c++

    std::vector<Thing> things;
    ...
    for (auto [i, thing] : enumerate(things))
    {
        // i gets the index and thing gets the Thing in each iteration
    }

* `Boost Counting Iterator`_

.. _`Python-Like enumerate() In C++17`: http://reedbeta.com/blog/python-like-enumerate-in-cpp17/
.. _`Boost Counting Iterator`: https://www.boost.org/doc/libs/1_69_0/libs/iterator/doc/counting_iterator.html

The Sleep Constructor
---------------------

.. image:: img/the-sleep-ctor.png

Twitter
-------

.. image:: img/programming-like-writing-book.png

Bjarne Meme
-----------

.. image:: img/bjarne-didnt-plan-for-this.png
