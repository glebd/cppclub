----

ACCU 2019 Trip Reports
----------------------

* `Kate Gregory <http://www.gregcons.com/KateBlog/ACCUTripReport.aspx>`_

GCC 9.1 Released
----------------

* Announcement https://lwn.net/Articles/787385/
  * C++17 fully implemented
  * OpenMP 5.0 partially supported
* Reddit https://www.reddit.com/r/cpp/comments/bk7uha/gcc_91_released/
* GCC 9: Link-time and inter-procedural optimization improvements
  http://hubicka.blogspot.com/2019/05/gcc-9-link-time-and-inter-procedural.html
* Usability improvements in GCC 9
  https://developers.redhat.com/blog/2019/03/08/usability-improvements-in-gcc-9/

flat.hpp
--------

A library of flat vector-like based associative containers.

* https://blackmatov.github.io/flat.hpp/
* https://github.com/BlackMATov/flat.hpp C++14, MIT
* https://www.reddit.com/r/cpp/comments/bkq9qn/new_c_minilibrary_library_of_flat_vectorlike/

Blue Oak License
----------------

https://blueoakcouncil.org/license/1.0.0

    Blue Oak Council’s model license demonstrates all the techniques that licenses can use to make software free and
    simple for everyone to use and build on, in everyday language that everyone can understand.

https://writing.kemitchell.com/2019/03/09/Deprecation-Notice.html

    MIT and BSD open source licenses are well known, popular, and legally deprecated. They served long and well, but
    they’re older than many open source software developers, and haven’t been maintained.

2019 Annual C++ Developer Survey Results
----------------------------------------

https://isocpp.org/files/papers/CppDevSurvey-2019-04-summary.pdf

C++17 parser-combinator library, CppCmb
---------------------------------------

Cpp>>=Cmb

* https://github.com/LPeter1997/CppCmb
* https://www.reddit.com/r/cpp/comments/bemqaq/my_c17_parsercombinator_library_cppcmb_got_a_huge/

On resolving the type vs member conflict in C++: The Color Color problem
------------------------------------------------------------------------

    In C++, there are ambiguities when a member function has the same name as a type.

* https://devblogs.microsoft.com/oldnewthing/20190419-00/?p=102431
* https://www.reddit.com/r/cpp/comments/bfb1z4/on_resolving_the_type_vs_member_conflict_in_c_the/
* https://en.cppreference.com/w/cpp/language/unqualified_lookup#Member_function_definition

Microsoft BlingFire - A lightning fast Finite State machine and REgular expression manipulation library
-------------------------------------------------------------------------------------------------------

* https://github.com/Microsoft/BlingFire (MIT)
* https://www.reddit.com/r/programming/comments/bf6ks4/microsoft_bing_fire_tokenizer_10x_faster_than_nltk/
* https://news.ycombinator.com/item?id=19687549

Quirks in Class Template Argument Deduction (1/2)
-------------------------------------------------

Barry Revzin: https://brevzin.github.io/c++/2018/09/01/quirks-ctad/

.. code:: c++

    std::tuple<int> foo();

    std::tuple x = foo(); // tuple<tuple<int>>?
    auto y = foo();       // tuple<int>

What is the intent behind the declaration of variable ``x``?
Are we constructing a new thing (the CTAD goal) or are we using ``std::tuple``
as annotation to ensure that ``x`` is in fact a ``tuple`` (the Concepts goal)?

Quirks in Class Template Argument Deduction (2/2)
-------------------------------------------------

A clearer example:

.. code:: c++

    // The tuple case
    // unquestionably, tuple<int>
    std::tuple a(1);

    // unquestionably, tuple<tuple<int>,tuple<int>>
    std::tuple b(a, a);

    // ??
    std::tuple c(a);

Awesome Parallel Computing Resources
------------------------------------

https://github.com/cpp-taskflow/cpp-taskflow/blob/master/awesome-parallel-computing.md

Same function parameters with different return type in C++17/C++20 (1/3)
------------------------------------------------------------------------

https://www.reddit.com/r/cpp/comments/aoidsi/what_is_the_solution_for_same_function_parameters/

Before:

.. code:: c++

    template<typename R>
    R foo(int i)
    { ... }

    foo<string>(1);

Same function parameters with different return type in C++17/C++20 (2/3)
------------------------------------------------------------------------

https://www.reddit.com/r/cpp/comments/aoidsi/what_is_the_solution_for_same_function_parameters/

After:

.. code:: c++

    template<class F> struct Auto : F {
        // conversion operator
        template<class T> operator T() {
            return F::template operator()<T>();
        }
    };

    template<class F> Auto(F) -> Auto<F>; // deduction guide

Same function parameters with different return type in C++17/C++20 (3/3)
------------------------------------------------------------------------

https://www.reddit.com/r/cpp/comments/aoidsi/what_is_the_solution_for_same_function_parameters/

After:

.. code:: c++

    template<class... A>
    auto fooWrapper(A&&... a) {
        return Auto{[&]<class T>() { return foo<T>(std::forward<A>(a)...); }};
    };

    template<class... A>
    auto fooWrapper(int i) {
        return Auto{[=]<class T>() { return foo<T>(i); }};
    };

    double d = fooWrapper(42);

uvw (header-only libuv wrapper in modern C++)
---------------------------------------------

Code: https://github.com/skypjack/uvw (C++14, MIT)

Reddit: https://www.reddit.com/r/cpp/comments/b3wkbf/exhaustive_and_composable_error_handling_in_c/

Boost.Outcome ready for Boost 1.70 release
------------------------------------------

https://www.reddit.com/r/cpp/comments/aqidl6/boostoutcome_ready_for_boost_170_release/

Getting in trouble with mixed comparisons
-----------------------------------------

https://brevzin.github.io/c++/2018/12/09/mixed-comparisons/

C++ Logging Libraries
---------------------

https://www.reddit.com/r/cpp/comments/a3gp0s/best_logging_libraries/

* Spdlog https://github.com/gabime/spdlog
* Loguru https://github.com/emilk/loguru
* EasyLogging https://github.com/zuhd-org/easyloggingpp
* Plog https://github.com/SergiusTheBest/plog
* Google Log https://github.com/google/glog
* P7 http://baical.net/p7.html

Data alignment the C++ way
--------------------------

https://vorbrodt.blog/2019/04/06/data-alignment-the-c-way/

Before modern C++:

.. code:: c++

    struct Old
    {
        int x;
        char padding[16 - sizeof(int)];
    };

Now:

.. code:: c++

    struct alignas(16) New
    {
        int x;
    };

What are some things commonly taught in C++ that are really bad practice?
-------------------------------------------------------------------------

https://www.reddit.com/r/cpp/comments/bgdawr/what_are_some_things_commonly_taught_in_c_that/

* Using inheritance for code reuse. After a couple of years you have an unmaintainable spaghetti that goes 5 levels deep. `# <https://www.reddit.com/r/cpp/comments/bgdawr/what_are_some_things_commonly_taught_in_c_that/elka68o?utm_source=share&utm_medium=web2x>`_
* Raw pointers/new/delete without RAII, improper use of raw (C) strings and arrays `# <https://www.reddit.com/r/cpp/comments/bgdawr/what_are_some_things_commonly_taught_in_c_that/elk6q6a?utm_source=share&utm_medium=web2x>`_
* Trust the programmer. I trusted myself once, and it didn’t end well. Never again making that mistake. `# <https://www.reddit.com/r/cpp/comments/bgdawr/what_are_some_things_commonly_taught_in_c_that/elk23m0?utm_source=share&utm_medium=web2x>`_
* ``using namespace std;`` `# <https://www.reddit.com/r/cpp/comments/bgdawr/what_are_some_things_commonly_taught_in_c_that/elkfyls?utm_source=share&utm_medium=web2x>`_
* Abuse of ``protected``. Where author of base class assumes you will correctly fiddle with protected members. `# <https://www.reddit.com/r/cpp/comments/bgdawr/what_are_some_things_commonly_taught_in_c_that/elk97j4?utm_source=share&utm_medium=web2x>`_
* Single entry, single exit. `# <https://www.reddit.com/r/cpp/comments/bgdawr/what_are_some_things_commonly_taught_in_c_that/ells0vz?utm_source=share&utm_medium=web2x>`_
* Throwing exceptions (!) `# <https://www.reddit.com/r/cpp/comments/bgdawr/what_are_some_things_commonly_taught_in_c_that/elk7qdu?utm_source=share&utm_medium=web2x>`_

**clamp_cast** -- A saturating arithmetic cast
----------------------------------------------

https://github.com/p-groarke/clamp_cast

A narrowing cast that does the right thing. clamp_cast will saturate output values at min or max if the input value would overflow / underflow.

.. code:: c++

    double ld = -42.0;
    unsigned char uc = clamp_cast<unsigned char>(ld);
    // uc == 0

    float f = 500000.f;
    char c = clamp_cast<char>(f);
    // c == 127

A pretty big list of C++ GUI libraries
--------------------------------------

Philippe M. Groarke: https://philippegroarke.com/posts/2018/c++_ui_solutions/

Reddit:

* https://www.reddit.com/r/cpp/comments/babfl5/a_pretty_big_list_of_c_gui_libraries/
* https://www.reddit.com/r/cpp/comments/9njw5n/is_there_an_easytouse_gui_library/
* https://www.reddit.com/r/cpp/comments/9q07bu/any_library_as_small_as_wxwidgets_but_as_powerful/

Modern UI in C++ https://www.reddit.com/r/cpp/comments/b3s2zq/modern_ui_in_c/

Modern Enums
------------

https://www.reddit.com/r/cpp/comments/b9xb3n/its_2019_we_have_the_power_of_constexpr_and/

* Static Enum https://github.com/KonanM/static_enum
* Magic Enum: Enum-to-String and String-to-Enum functions for modern C++ https://github.com/Neargye/magic_enum
* Better Enums http://aantron.github.io/better-enums/
* Wise Enum https://github.com/quicknir/wise_enum
* Meta Enum https://github.com/therocode/meta_enum

Nameof operator for modern C++
------------------------------

https://github.com/Neargye/nameof

See also: CTTI https://github.com/Manu343726/ctti

Exhaustive and Composable Error Handling in C++ (1/3)
-----------------------------------------------------

`Fabian Kosmale <https://fkosmale.bitbucket.io/posts/exhaustive-and-composable-error-handling-in-c%2B%2B/#composable-error-handling>`_

    TL;DR: You can emulate OCaml polymorphic sum type error handling in C++17.

Code: https://bitbucket.org/fkosmale/composableresult/src/master
Reddit: https://www.reddit.com/r/cpp/comments/b3wkbf/exhaustive_and_composable_error_handling_in_c/

    Some people also take exception to the fact that exception handling tables can bloat binaries, or to some <...> slow-down due to exceptions. While one might disagree on the severity of this issue <...>, this issue is important enough for all major compilers to provide a no-exceptions flag, which disables exception support. This makes exceptions a bad idea for library writers who want their libraries to work in as many contexts as possible.

Exhaustive and Composable Error Handling in C++ (2/3)
-----------------------------------------------------

.. code:: c++

    class AST;
    struct SyntaxError {int line; int column;};
    struct GrammarError {int line; int column; std::string explanation;};
    auto parse(std::string input) -> Result<AST, SyntaxError, GrammarError>;

    struct LengthError {int length;};
    struct HeightError {int height;};
    auto validate(AST ast) -> Result<AST, LengthError, HeightError>

    struct DisplayError {std::string explanation;}
    auto display(AST ast) -> void;

Exhaustive and Composable Error Handling in C++ (3/3)
-----------------------------------------------------

.. code:: c++

    auto result = parse(my_input)
      .then(validate)
      .then(display);
    Switch(result)
      .Case<SyntaxError>([](auto err){
        report_error("Invalid syntax at line", e.line, ":", e.column);})
      .Case<GrammarError>([](auto err){
        report_error(e.explanation, "at ", e.line, ":", e.column);})
      .Case<LengthError>([](auto err){
        report_errror("illegal length: ", e.length);})
      .Case<DisplayError>([](auto err){
        report_error(e.explanation);})
      | ESAC;
    // Triggers static_assert as HeightError is unhandled

Units
-----

https://github.com/nholthaus/units

Having fun in life!
-------------------

http://thiagocafe.com/view/20170910_Having_fun_in_life

C++ Operator Signatures
-----------------------

https://gist.github.com/beached/38a4ae52fcadfab68cb6de05403fa393

`Local copy <https://glebd.github.io/cppclub/3rd/C++%20normal%20operators.md>`_

https://github.com/glebd/cppclub/blob/next/3rd/C%2B%2B%2520normal%2520operators.md

Hedley
------

Hedley: A C/C++ header to help move ``#ifdef``s out of your code

* Home page: https://nemequ.github.io/hedley/
* Reddit: https://www.reddit.com/r/cpp/comments/bm2xyk/hedley_a_cc_header_to_help_move_ifdefs_out_of/

STXXL
-----

STXXL: Standard Template Library for Extra Large Data Sets.

The core of STXXL is an implementation of the C++ standard template library for external memory (out-of-core) computations, i. e., STXXL implements containers and algorithms that can process huge volumes of data that only fit on disks. While the closeness to the STL supports ease of use and compatibility with existing applications, another design priority is high performance.

* Home: http://stxxl.org/
* Code: https://github.com/stxxl/stxxl (Boost Software License)
* Video: http://panthema.net/2014/0622-Talk-STXXL-1.4.0-and-Beyond/

Quote
-----

Nicooll Hunt:

    The first step of any project is to grossly underestimate its complexity and difficulty.
