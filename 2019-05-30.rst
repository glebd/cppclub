----

What was your latest discovery about C++?
-----------------------------------------

https://www.reddit.com/r/cpp/comments/blu0a4/what_was_your_latest_discovery_about_c/

`URLs in code are legal <https://www.reddit.com/r/cpp/comments/blu0a4/what_was_your_latest_discovery_about_c/emrlwk1?utm_source=share&utm_medium=web2x>`_

.. code::

    void fn() {
        https://www.google.com
        cout << "Everything is fine.\n"
    }

What was your latest discovery about C++? (cont.)
-------------------------------------------------

* Using ``template`` to disambiguate dependent names: `Reddit <https://www.reddit.com/r/cpp/comments/blu0a4/what_was_your_latest_discovery_about_c/emrjntl?utm_source=share&utm_medium=web2x>`_ | `CppReference <https://en.cppreference.com/w/cpp/language/dependent_name>`_ | `SO <https://stackoverflow.com/a/51799617/10154>`_
* Type covariance for virtual functions: `Reddit <https://www.reddit.com/r/cpp/comments/blu0a4/what_was_your_latest_discovery_about_c/emrwtqb?utm_source=share&utm_medium=web2x>`_
* Switch statement discoveries: `Reddit <https://www.reddit.com/r/cpp/comments/blu0a4/what_was_your_latest_discovery_about_c/emrgq5b?utm_source=share&utm_medium=web2x>`_
* Function-level ``try/catch``: `Reddit <https://www.reddit.com/r/cpp/comments/blu0a4/what_was_your_latest_discovery_about_c/emrkku1?utm_source=share&utm_medium=web2x>`_
* ``delete this``: `Reddit <https://www.reddit.com/r/cpp/comments/blu0a4/what_was_your_latest_discovery_about_c/emryqxl?utm_source=share&utm_medium=web2x>`_
* Fun with nested classes: `Reddit <https://www.reddit.com/r/cpp/comments/blu0a4/what_was_your_latest_discovery_about_c/emrn53p?utm_source=share&utm_medium=web2x>`_
* Unique object address: `Reddit <https://www.reddit.com/r/cpp/comments/blu0a4/what_was_your_latest_discovery_about_c/ems14qm?utm_source=share&utm_medium=web2x>`_
* A class can have a static member of incomplete class type: `Reddit <https://www.reddit.com/r/cpp/comments/blu0a4/what_was_your_latest_discovery_about_c/emrsv5y?utm_source=share&utm_medium=web2x>`_
* Namespaces can recursively refer to themselves: `Reddit <https://www.reddit.com/r/cpp/comments/blu0a4/what_was_your_latest_discovery_about_c/emt3p6h?utm_source=share&utm_medium=web2x>`_
* C++ is popular: `Reddit <https://www.reddit.com/r/cpp/comments/blu0a4/what_was_your_latest_discovery_about_c/emrz3bk?utm_source=share&utm_medium=web2x>`_

What was your latest discovery about C++? (cont.)
-------------------------------------------------

The "arrow operator" (`Reddit <https://www.reddit.com/r/cpp/comments/blu0a4/what_was_your_latest_discovery_about_c/ems982b?utm_source=share&utm_medium=web2x>`_)

.. code:: c++

    int x = 10;
    while (x --> 0) // x goes to 0
    {
        printf("%d ", x);
    }

C++ Weekly - Ep 144 - Pure Functions in C++
-------------------------------------------

https://youtu.be/8ZxGABHcu40

https://www.reddit.com/r/cpp/comments/a2qzsv/c_weekly_ep_144_pure_functions_in_c/

.. code:: c++

    int square(int value) __attribute__((pure));
    [[gnu::pure]] int square2(int value);
    [[gnu::const]] int square3(int value);

C++ Logging Libraries
---------------------

https://www.reddit.com/r/cpp/comments/a3gp0s/best_logging_libraries/

* Spdlog https://github.com/gabime/spdlog
* Loguru https://github.com/emilk/loguru
* EasyLogging https://github.com/zuhd-org/easyloggingpp
* Plog https://github.com/SergiusTheBest/plog
* Google Log https://github.com/google/glog
* P7 http://baical.net/p7.html

sol3 is Released
----------------

https://thephd.github.io/sol3-released

https://sol2.readthedocs.io/en/latest/

https://www.reddit.com/r/cpp/comments/bs0piq/sol3_a_modern_luac_binding_is_released/

Vexing exceptions
-----------------

https://blogs.msdn.microsoft.com/ericlippert/2008/09/10/vexing-exceptions/

Exhaustive and Composable Error Handling in C++ (1/3)
-----------------------------------------------------

`Fabian Kosmale <https://fkosmale.bitbucket.io/posts/exhaustive-and-composable-error-handling-in-c%2B%2B/#composable-error-handling>`_

    TL;DR: You can emulate OCaml polymorphic sum type error handling in C++17.

`Code <https://bitbucket.org/fkosmale/composableresult/src/master>`_ :: `Reddit <https://www.reddit.com/r/cpp/comments/b3wkbf/exhaustive_and_composable_error_handling_in_c/>`_

Exhaustive and Composable Error Handling in C++ (2/3)
-----------------------------------------------------

.. code:: c++

    class AST;
    struct SyntaxError {int line; int column;};
    struct GrammarError {int line; int column; std::string explanation;};
    auto parse(std::string input) -> Result<AST, SyntaxError, GrammarError>;

    struct LengthError {int length;};
    struct HeightError {int height;};
    auto validate(AST ast) -> Result<AST, LengthError, HeightError>;

    struct DisplayError {std::string explanation;};
    auto display(AST ast) -> void;

Exhaustive and Composable Error Handling in C++ (3/3)
-----------------------------------------------------

.. code:: c++

    auto result = parse(my_input)
      .then(validate)
      .then(display);
    Switch(result)
      .Case<SyntaxError>([](auto err){
        report_error("Invalid syntax at line", e.line, ":", e.column);})
      .Case<GrammarError>([](auto err){
        report_error(e.explanation, "at ", e.line, ":", e.column);})
      .Case<LengthError>([](auto err){
        report_errror("illegal length: ", e.length);})
      .Case<DisplayError>([](auto err){
        report_error(e.explanation);})
      | ESAC;
    // Triggers static_assert as HeightError is unhandled

Units
-----

https://github.com/nholthaus/units

Having fun in life!
-------------------

http://thiagocafe.com/view/20170910_Having_fun_in_life

C++ Operator Signatures
-----------------------

https://gist.github.com/beached/38a4ae52fcadfab68cb6de05403fa393

https://github.com/glebd/cppclub/blob/next/3rd/C%2B%2B%2520normal%2520operators.md

Hedley
------

Hedley: A C/C++ header to help move ``#ifdef``s out of your code

* Home page: https://nemequ.github.io/hedley/
* Reddit: https://www.reddit.com/r/cpp/comments/bm2xyk/hedley_a_cc_header_to_help_move_ifdefs_out_of/

STXXL
-----

STXXL: Standard Template Library for Extra Large Data Sets.

The core of STXXL is an implementation of the C++ standard template library for external memory (out-of-core) computations, i. e., STXXL implements containers and algorithms that can process huge volumes of data that only fit on disks. While the closeness to the STL supports ease of use and compatibility with existing applications, another design priority is high performance.

* Home: http://stxxl.org/
* Code: https://github.com/stxxl/stxxl (Boost Software License)
* Video: http://panthema.net/2014/0622-Talk-STXXL-1.4.0-and-Beyond/
