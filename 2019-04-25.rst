----

ACCU 2019
---------

* `ACCU 2019 Slides and Trip Report by Anthony Williams <https://www.justsoftwaresolutions.co.uk/news/accu-2019-report.html>`_
* `Trip report by Ori Ben-Shir <https://oribenshir.github.io/afternoon_rusting/blog/ACCU-Summary>`_ (a Rust developer)

C++17/20 Features and Fixes in Visual Studio 2019
-------------------------------------------------

* https://devblogs.microsoft.com/cppblog/cpp17-20-features-and-fixes-in-vs-2019/
* https://www.reddit.com/r/cpp/comments/bf3fmk/c1720_features_and_fixes_in_visual_studio_2019/

Bjarne Stroustrup 2008 interview for Embedded Systems Conference keynote (1/9)
------------------------------------------------------------------------------

https://youtu.be/HBuIBaOEqYQ

How have you seen the embedded systems industry change over the last 20 years?

  The ubiquity of embedded systems (in 2008!)

Bjarne Stroustrup 2008 interview for Embedded Systems Conference keynote (2/9)
------------------------------------------------------------------------------

https://youtu.be/HBuIBaOEqYQ

What would you say is the most difficult aspect of your work with C++?

  Combining flexibility with performance is hard, especially when you have to remain backward compatible.

  C++ had $5000 over 3 years of advertisement budget.

Bjarne Stroustrup 2008 interview for Embedded Systems Conference keynote (3/9)
------------------------------------------------------------------------------

https://youtu.be/HBuIBaOEqYQ

If you were starting off in the industry today, what would you want to invent, and why?

  Better support for hard realtime constraints, reliability, concurrency.
  A combination of language and tools, compilation and execution techniques.
  Perhaps a subset of a general-purpose language, or a subset of C++ (1/10 in size).

Bjarne Stroustrup 2008 interview for Embedded Systems Conference keynote (4/9)
------------------------------------------------------------------------------

https://youtu.be/HBuIBaOEqYQ

Are there any aspects of C++ that you wish you could change?

* C++ syntax is baroque (some decisions were made because the C compiler had to fit in 48K memory)
* Inside C++ there is a smaller language (1/10 in size)
* Scope, RAII
* Classes, templates would still be there

Bjarne Stroustrup 2008 interview for Embedded Systems Conference keynote (5/9)
------------------------------------------------------------------------------

https://youtu.be/HBuIBaOEqYQ

Did you ever imagine that C++ would become so important?

  Performance still matters.

Bjarne Stroustrup 2008 interview for Embedded Systems Conference keynote (6/9)
------------------------------------------------------------------------------

https://youtu.be/HBuIBaOEqYQ

Is there any reason for a competent programmer to use C when a C++ compiler of comparable quality is available for a target platform?

  No.

Bjarne Stroustrup 2008 interview for Embedded Systems Conference keynote (7/9)
------------------------------------------------------------------------------

https://youtu.be/HBuIBaOEqYQ

What's your opinion on the embedded C++ subset?

* A bad idea. No templates (?!)
* Need rules specific for the area.
* Start with a superset (language + libraries), then cut off unnecessary things.
  * *JSF was mentioned!*
* In a hard realtime environment:
  * Don't rely on a general-purpose free store manager
  * Be very careful with C pointers

Bjarne Stroustrup 2008 interview for Embedded Systems Conference keynote (8/9)
------------------------------------------------------------------------------

https://youtu.be/HBuIBaOEqYQ

What's next after C++?

  C++ will be around as a major factor for another 20 years at least.
  Next generation (C++0x) will be finished in a couple of years.
  It will be a significant improvement.

  Teaching, writing a book for beginners. Researching tools and techniques.

  Work on C++0x will wind down over the next few years. (!!)

Bjarne Stroustrup 2008 interview for Embedded Systems Conference keynote (9/9)
------------------------------------------------------------------------------

https://youtu.be/HBuIBaOEqYQ

Which programming techniques and language features are the most important?

  With C++ you combine different techniques and features to solve the problem. This will improve with C++0x.

  With hard realtime constraints we shouldn't use free store or exceptions ("I'm very sad"), given the tools we have today.

Interactive C++: Meet Jupyter / Cling - Neil Horlock [ACCU 2019]
----------------------------------------------------------------

https://youtu.be/UzfYG8GdB3I

So, what's exactly wrong with C++?
----------------------------------

https://www.reddit.com/r/cpp/comments/bfia2h/so_whats_exactly_wrong_with_c/

What are some things commonly taught in C++ that are really bad practice?
-------------------------------------------------------------------------

https://www.reddit.com/r/cpp/comments/bgdawr/what_are_some_things_commonly_taught_in_c_that/

* Using inheritance for code reuse. After a couple of years you have an unmaintainable spaghetti that goes 5 levels deep. `# <https://www.reddit.com/r/cpp/comments/bgdawr/what_are_some_things_commonly_taught_in_c_that/elka68o?utm_source=share&utm_medium=web2x>`_
* Raw pointers/new/delete without RAII, improper use of raw (C) strings and arrays `# <https://www.reddit.com/r/cpp/comments/bgdawr/what_are_some_things_commonly_taught_in_c_that/elk6q6a?utm_source=share&utm_medium=web2x>`_
* Trust the programmer. I trusted myself once, and it didnâ€™t end well. Never again making that mistake. `# <https://www.reddit.com/r/cpp/comments/bgdawr/what_are_some_things_commonly_taught_in_c_that/elk23m0?utm_source=share&utm_medium=web2x>`_
* ``using namespace std;`` `# <https://www.reddit.com/r/cpp/comments/bgdawr/what_are_some_things_commonly_taught_in_c_that/elkfyls?utm_source=share&utm_medium=web2x>`_
* Abuse of ``protected``. Where author of base class assumes you will correctly fiddle with protected members. `# <https://www.reddit.com/r/cpp/comments/bgdawr/what_are_some_things_commonly_taught_in_c_that/elk97j4?utm_source=share&utm_medium=web2x>`_
* Single entry, single exit. `# <https://www.reddit.com/r/cpp/comments/bgdawr/what_are_some_things_commonly_taught_in_c_that/ells0vz?utm_source=share&utm_medium=web2x>`_
* Throwing exceptions (!) `# <https://www.reddit.com/r/cpp/comments/bgdawr/what_are_some_things_commonly_taught_in_c_that/elk7qdu?utm_source=share&utm_medium=web2x>`_

Why is ``std::move`` not ``[[nodiscard]]`` in C++20?
----------------------------------------------------

https://stackoverflow.com/questions/55772424/why-is-stdmove-not-nodiscard-in-c20

Microsoft BlingFire - A lightning fast Finite State machine and REgular expression manipulation library
-------------------------------------------------------------------------------------------------------

* https://github.com/Microsoft/BlingFire (MIT)
* https://www.reddit.com/r/programming/comments/bf6ks4/microsoft_bing_fire_tokenizer_10x_faster_than_nltk/
* https://news.ycombinator.com/item?id=19687549

On resolving the type vs member conflict in C++: The Color Color problem
------------------------------------------------------------------------

    In C++, there are ambiguities when a member function has the same name as a type.

* https://devblogs.microsoft.com/oldnewthing/20190419-00/?p=102431
* https://www.reddit.com/r/cpp/comments/bfb1z4/on_resolving_the_type_vs_member_conflict_in_c_the/
* https://en.cppreference.com/w/cpp/language/unqualified_lookup#Member_function_definition

**clamp_cast** -- A saturating arithmetic cast
----------------------------------------------

https://github.com/p-groarke/clamp_cast

A narrowing cast that does the right thing. clamp_cast will saturate output values at min or max if the input value would overflow / underflow.

.. code:: c++

    double ld = -42.0;
    unsigned char uc = clamp_cast<unsigned char>(ld);
    // uc == 0

    float f = 500000.f;
    char c = clamp_cast<char>(f);
    // c == 127

Quirks in Class Template Argument Deduction (1/2)
-------------------------------------------------

Barry Revzin: https://brevzin.github.io/c++/2018/09/01/quirks-ctad/

.. code:: c++

    std::tuple<int> foo();

    std::tuple x = foo(); // tuple<tuple<int>>?
    auto y = foo();       // tuple<int>

What is the intent behind the declaration of variable ``x``?
Are we constructing a new thing (the CTAD goal) or are we using ``std::tuple``
as annotation to ensure that ``x`` is in fact a ``tuple`` (the Concepts goal)?

Quirks in Class Template Argument Deduction (2/2)
-------------------------------------------------

A clearer example:

.. code:: c++

    // The tuple case
    // unquestionably, tuple<int>
    std::tuple a(1);

    // unquestionably, tuple<tuple<int>,tuple<int>>
    std::tuple b(a, a);

    // ??
    std::tuple c(a);

A pretty big list of C++ GUI libraries
--------------------------------------

Philippe M. Groarke: https://philippegroarke.com/posts/2018/c++_ui_solutions/

Reddit:

* https://www.reddit.com/r/cpp/comments/babfl5/a_pretty_big_list_of_c_gui_libraries/
* https://www.reddit.com/r/cpp/comments/9njw5n/is_there_an_easytouse_gui_library/
* https://www.reddit.com/r/cpp/comments/9q07bu/any_library_as_small_as_wxwidgets_but_as_powerful/

Modern UI in C++ https://www.reddit.com/r/cpp/comments/b3s2zq/modern_ui_in_c/

Modern Enums
------------

https://www.reddit.com/r/cpp/comments/b9xb3n/its_2019_we_have_the_power_of_constexpr_and/

* Static Enum https://github.com/KonanM/static_enum
* Magic Enum: Enum-to-String and String-to-Enum functions for modern C++ https://github.com/Neargye/magic_enum
* Better Enums http://aantron.github.io/better-enums/
* Wise Enum https://github.com/quicknir/wise_enum
* Meta Enum https://github.com/therocode/meta_enum

Nameof operator for modern C++
------------------------------

https://github.com/Neargye/nameof

See also: CTTI https://github.com/Manu343726/ctti

Xmake
-----

Xmake is a cross-platform build utility based on Lua.

https://github.com/xmake-io/xmake

Reddit: https://www.reddit.com/r/cpp/comments/bb46xi/github_xmakeioxmake_a_modern_cc_build_utility/

Exhaustive and Composable Error Handling in C++ (1/3)
-----------------------------------------------------

`Fabian Kosmale <https://fkosmale.bitbucket.io/posts/exhaustive-and-composable-error-handling-in-c%2B%2B/#composable-error-handling>`_

    TL;DR: You can emulate OCaml polymorphic sum type error handling in C++17.

Code: https://bitbucket.org/fkosmale/composableresult/src/master
Reddit: https://www.reddit.com/r/cpp/comments/b3wkbf/exhaustive_and_composable_error_handling_in_c/

    Some people also take exception to the fact that exception handling tables can bloat binaries, or to some <...> slow-down due to exceptions. While one might disagree on the severity of this issue <...>, this issue is important enough for all major compilers to provide a no-exceptions flag, which disables exception support. This makes exceptions a bad idea for library writers who want their libraries to work in as many contexts as possible.

Exhaustive and Composable Error Handling in C++ (2/3)
-----------------------------------------------------

.. code:: c++

    class AST;
    struct SyntaxError {int line; int column;};
    struct GrammarError {int line; int column; std::string explanation;};
    auto parse(std::string input) -> Result<AST, SyntaxError, GrammarError>;

    struct LengthError {int length;};
    struct HeightError {int height;};
    auto validate(AST ast) -> Result<AST, LengthError, HeightError>

    struct DisplayError {std::string explanation;}
    auto display(AST ast) -> void;

Exhaustive and Composable Error Handling in C++ (3/3)
-----------------------------------------------------

.. code:: c++

    auto result = parse(my_input)
      .then(validate)
      .then(display);
    Switch(result)
      .Case<SyntaxError>([](auto err){
        report_error("Invalid syntax at line", e.line, ":", e.column);})
      .Case<GrammarError>([](auto err){
        report_error(e.explanation, "at ", e.line, ":", e.column);})
      .Case<LengthError>([](auto err){
        report_errror("illegal length: ", e.length);})
      .Case<DisplayError>([](auto err){
        report_error(e.explanation);})
      | ESAC;
    // Triggers static_assert as HeightError is unhandled

ClangJIT: Enhancing C++ with Just-in-Time Compilation
-----------------------------------------------------

https://arxiv.org/abs/1904.08555#

    C++ programmers use templates to specialize algorithms <...> This capability has been limited to those specializations that can be identified when the application is compiled, and in many critical cases, compiling all potentially-relevant specializations is not practical. ClangJIT provides a well-integrated C++ language extension allowing template-based specialization to occur during program execution. This capability has been implemented for use in large-scale applications, and we demonstrate that just-in-time-compilation-based dynamic specialization can be integrated into applications, often requiring minimal changes (or no changes) to the applications themselves, providing significant performance improvements, programmer-productivity improvements, and decreased compilation time.

Awesome Parallel Computing Resources
------------------------------------

https://github.com/cpp-taskflow/cpp-taskflow/blob/master/awesome-parallel-computing.md

Twitter
-------

.. image:: img/co2-meeting-room.png

Twitter
-------

Greg Ferro:

    An engineer who works remotely should be called an 'engifar'

Twitter
-------

.. image:: img/strongly-typed.png
